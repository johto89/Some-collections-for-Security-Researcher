<#
    Author: Johto Robbie
    License: GPLv3
#>

param (
    [Parameter(Mandatory = $true)]
    [string]$projectFolderPath
)

# Trim the project folder path to remove leading/trailing spaces
$projectFolderPath = $projectFolderPath.Trim()

# Extract the project folder name for output file
$folderName = [System.IO.Path]::GetFileName($projectFolderPath.TrimEnd('\'))
$outputFilePath = "$folderName-scan-results.txt"
$jsonOutputPath = "$folderName-scan-results.json"
$csvOutputPath = "$folderName-scan-results.csv"

# Initialize matches array
$allMatches = @()

# Define detection patterns and rules
$patterns = @(
    @{ 
        Type = "Shellcode Patterns"
        Patterns = @(
            "\b(?:[0-9a-fA-F]{2}[\s-]?){10,}\b",  # Basic hex sequences
            "\\x[0-9a-fA-F]{2}",                   # \x format hex
            "0x[0-9a-fA-F]{2}",                    # 0x format hex
            "%u[0-9a-fA-F]{4}",                    # Unicode format
            "\\u[0-9a-fA-F]{4}"                    # \u format Unicode
        )
        Whitelist = @(
            'ComposerAutoloader[a-f0-9]{32}',
            'ComposerStatic[a-f0-9]{32}',
            'composer[._-][a-f0-9]{32}',
            '(?:md5|sha1|sha256|hash)\([^)]+\)',
            '@generated',
            'vendor/composer',
            'autoload',
            '__DIR__',
            'require',
            'include',
            'spl_autoload',
            'color:\s*#[0-9a-fA-F]{6}',           # CSS color codes
            'background(?:-color)?:\s*#[0-9a-fA-F]{6}'  # CSS background colors
        )
    },
    @{ 
        Type = "Injection Functions"
        Patterns = @(
            # Windows API
            "CreateRemoteThread",
            "OpenProcess",
            "VirtualAllocEx",
            "WriteProcessMemory",
            "ReadProcessMemory",
            "GetProcAddress",
            "LoadLibraryA",
            "LoadLibraryW",
            "VirtualFreeEx",
            "CreateProcessA",
            "CreateProcessW",
            "VirtualProtect",
            "HeapCreate",
            "HeapAlloc",
            "RtlCreateHeap",
            "NtCreateSection",
            "NtMapViewOfSection",
            "MapViewOfFile",
            "ZwMapViewOfSection",
            "NtProtectVirtualMemory",
            "VirtualProtectEx",
            "ControlService",
            "CreateService",
            "StartService"
        )
        Whitelist = @(
            'function\s+reference',
            '//.*',
            '/\*[\s\S]*?\*/',
            '#\s*include',
            'composer',
            'autoload',
            'vendor',
            'generated'
        )
    },
    @{ 
        Type = "Webshell Functions"
        Patterns = @(
            # PHP Functions
            "\bexec\s*\(",
            "\bshell_exec\s*\(",
            "\bsystem\s*\(",
            "\bpassthru\s*\(",
            "\bpopen\s*\(",
            "\bproc_open\s*\(",
            "\beval\s*\(",
            "\bassert\s*\(",
            "\bpreg_replace\s*\(.*/e.*\)",
            "\bcreate_function\s*\(",
            "\binclude\s*\(",
            "\brequire\s*\(",
            "\binclude_once\s*\(",
            "\brequire_once\s*\(",
            "\bcurl_exec\s*\(",
            "\bcurl_multi_exec\s*\(",
            "\bfile_get_contents\s*\(",
            "\bfile_put_contents\s*\(",
            "\bfsockopen\s*\(",
            "\bstream_socket_client\s*\(",
            "\bcall_user_func\s*\(",
            "\bcall_user_func_array\s*\(",
            "\bregister_shutdown_function\s*\(",
            "\bob_start\s*\(",
            "\bbase64_decode\s*\(",
            "\bgzinflate\s*\(",
            "\bgzuncompress\s*\(",
            "\bstr_rot13\s*\(",

            # .NET (C# and VB.NET) Functions
            "\bProcess\.Start\s*\(",
            "\bSystem\.Diagnostics\.Process\.Start\s*\(",
            "\bShell\s*\(",  # VB.NET
            "\bShellExecute\s*\(",
            "\bFile\.WriteAllBytes\s*\(",
            "\bFile\.AppendAllText\s*\(",
            "\bFileStream\s*\(",
            "\bStreamWriter\s*\(",
            "\bMy\.Computer\.FileSystem\.",
            "\bAssembly\.Load",
            "\bAssembly\.LoadFrom",
            "\bAssembly\.LoadFile",
            "\bActivator\.CreateInstance",
            "\bAppDomain\.ExecuteAssembly",
            "\bType\.GetType",
            "\bReflection\.",
            "\bSystem\.CodeDom\.Compiler\.",
            "\bCScriptEngine\.",
            "\bVBCodeProvider\.",
            "\bWebClient\.",
            "\bHttpWebRequest\.",
            "\bTcpClient\.",
            "\bNetworkStream\.",

            # C/C++ Functions
            "\bsystem\s*\(",
            "\bexecl\s*\(",
            "\bexeclp\s*\(",
            "\bexecle\s*\(",
            "\bexecv\s*\(",
            "\bexecvp\s*\(",
            "\bexecve\s*\(",
            "\bpopen\s*\(",
            "\b_popen\s*\(",  
            "\bCreateProcess",
            "\bShellExecute",
            "\bWinExec\s*\(",
            "\bfopen\s*\(",
            "\b_wfopen\s*\(",
            "\bCreateFile",
            "\bWriteFile",
            "\bfwrite\s*\(",
            "\bprintf\s*\(",
            "\bsprintf\s*\(",
            "\bvsprintf\s*\(",
            "\bscanf\s*\(",
            "\bmemcpy\s*\(",
            "\bmemmove\s*\(",
            "\bstrcpy\s*\(",
            "\bstrcat\s*\(",
            "\bgets\s*\(",
            "\bsocket\s*\(",
            "\bconnect\s*\(",
            "\bbind\s*\(",
            "\blisten\s*\(",
            "\baccept\s*\(",
            "\bWSAStartup",
            "\binet_addr",

            # Java Functions
            "\bRuntime\.getRuntime\s*\(\)\.exec\s*\(",
            "\bProcessBuilder\s*\(",
            "\bFileOutputStream\s*\(",
            "\bObjectInputStream\s*\(",
            "\bClass\.forName\s*\(",
            "\bnew\s+URLClassLoader\s*\(",
            "\bScriptEngineManager\.getEngineByName\s*\(",
            "\bClassLoader\.",
            "\bdefineClass\s*\(",

            # Python Functions
            "\bos\.system\s*\(",
            "\bos\.popen\s*\(",
            "\bos\.execv\s*\(",
            "\bos\.execve\s*\(",
            "\bos\.spawnl\s*\(",
            "\bos\.spawnlp\s*\(",
            "\bos\.spawnv\s*\(",
            "\bos\.spawnvp\s*\(",
            "\bsubprocess\.Popen\s*\(",
            "\bsubprocess\.call\s*\(",
            "\beval\s*\(",
            "\bexec\s*\(",
            "\bopen\s*\(",
            "\b__import__\s*\(",
            "\bmarshal\.loads\s*\(",
            "\bpickle\.loads\s*\(",
            "\binput\s*\(",
            "\bcompile\s*\(",
            "\bctypes\.CDLL\s*\(",
            "\bctypes\.WinDLL\s*\(",

            # Golang Functions
            "\bexec\.Command\s*\(",
            "\bios\.Create\s*\(",
            "\bios\.Open\s*\(",
            "\bioutil\.WriteFile\s*\(",
            "\bjson\.Unmarshal\s*\(",
            "\bnet\.Listen\s*\(",
            "\bhttp\.ListenAndServe\s*\(",
            "\brpc\.Dial\s*\(",
            "\brpc\.DialHTTP\s*\(",
            "\brpc\.Register\s*\("
        )
        Whitelist = @(
            'function\s+reference',
            '//.*',
            '/\*[\s\S]*?\*/',
            '#\s*include',
            '#\s*define',
            'composer',
            'autoload',
            'vendor',
            'generated',
            'test',
            'mock',
            'unittest',
            'example'
        )
    },
    @{
        Type = "Math Pattern"
        Patterns = @(
            # Encoding/Encryption patterns
            "\bbtoa\s*\(",                         # Base64 encoding
            "\batob\s*\(",                         # Base64 decoding
            "\bencodeURIComponent\s*\(",           # URL encoding
            "\bdecodeURIComponent\s*\(",           # URL decoding
            "\bencodeURI\s*\(",                    # URI encoding
            "\bdecodeURI\s*\(",                    # URI decoding
            "\bMath\.random\s*\(\)\s*\*\s*\d+",   # Random number multiplication
            "\bMath\.floor\s*\(\s*Math\.random",   # Random integer generation
            "\bcharCodeAt\s*\(\s*\d+\s*\)",       # Character code manipulation
            "\bString\.fromCharCode\s*\(",         # Character code to string
            "\b\w+\s*(?:\+|\-|\*|\/|\%|\||\&|\^)\s*\d+\s*(?:\+|\-|\*|\/|\%|\||\&|\^)\s*\d+", # Complex arithmetic
            "\b(?:0x[0-9a-fA-F]+|\d+)\s*(?:\+|\-|\*|\/|\%|\||\&|\^)\s*(?:0x[0-9a-fA-F]+|\d+)", # Numeric operations
            "for\s*\(\s*\w+\s*=\s*\d+\s*;\s*\w+\s*(?:<|>|<=|>=)\s*\d+\s*;\s*\w+\s*(?:\+\+|\-\-|\+=|-=|\*=|\/=)\s*\)", # Loop with arithmetic
            "\[\s*(?:\d+\s*(?:\+|\-|\*|\/|\%)\s*)+\d+\s*\]", # Array index arithmetic
            "(?:<<|>>)\s*\d+",                    # Bit shifting
            "\b(?:sin|cos|tan|asin|acos|atan|atan2|sqrt|pow)\s*\(" # Mathematical functions
        )
        Whitelist = @(
            'function\s+reference',
            '//.*',
            '/\*[\s\S]*?\*/',
            '#\s*include',
            'composer',
            'autoload',
            'vendor',
            'generated',
            'test',
            'mock',
            'math\.js',
            'calculator',
            'compute'
        )
    }
)

function Test-ValidContext {
    param (
        [string]$content,
        [string]$match,
        [array]$whitelistPatterns
    )
    
    $safeContexts = @(
        'composer',
        'autoload',
        'vendor',
        'generated',
        'cache',
        'package',
        'namespace',
        'class',
        'function',
        'test',
        'mock',
        'example'
    )
    
    # Get surrounding context (expanded to 100 characters before and after)
    $contextStart = [Math]::Max(0, $content.IndexOf($match) - 100)
    $contextLength = [Math]::Min(200, $content.Length - $contextStart)
    $surroundingContext = $content.Substring($contextStart, $contextLength)
    
    # Check for safe contexts
    foreach ($safeContext in $safeContexts) {
        if ($surroundingContext -match $safeContext) {
            return $false
        }
    }
    
    # Check whitelist patterns
    foreach ($whitePattern in $whitelistPatterns) {
        if ($content -match "(?s)$whitePattern.*?\b$([regex]::Escape($match))\b") {
            return $false
        }
    }
    
    # Additional checks for common false positives
    if ($content -match "(?i)(@generated|composer|autoload|vendor|test|mock|example)") {
        return $false
    }
    
    return $true
}

function Get-FileHash {
    param (
        [string]$filePath
    )
    
    try {
        $hash = Get-FileHash -Path $filePath -Algorithm SHA256
        return $hash.Hash
    }
    catch {
        return "Could not calculate hash"
    }
}

function Get-FileMetadata {
    param (
        [string]$filePath
    )
    
    try {
        $file = Get-Item $filePath
        return @{
            CreationTime = $file.CreationTime
            LastWriteTime = $file.LastWriteTime
            LastAccessTime = $file.LastAccessTime
            Size = $file.Length
            Extension = $file.Extension
            Hash = Get-FileHash -filePath $filePath
        }
    }
    catch {
        return $null
    }
}

# Initialize scan statistics
$scanStats = @{
    StartTime = Get-Date
    TotalFiles = 0
    ScannedFiles = 0
    MatchesFound = 0
    ErrorCount = 0
    Errors = @()
}

# Create progress bar
$progressParams = @{
    Activity = "Scanning files for suspicious patterns"
    Status = "Initializing..."
    PercentComplete = 0
}

# Output the project folder path
Write-Host "Starting scan in path: '$projectFolderPath'" -ForegroundColor Green
Write-Host "Initializing scan..." -ForegroundColor Yellow

# Get total number of files for progress calculation
$totalFiles = (Get-ChildItem -Path $projectFolderPath -Recurse -Include *.java, *.php, *.cs, *.html, *.js, *.py, *.go, *.cpp, *.c, *.h, *.hpp).Count
$scanStats.TotalFiles = $totalFiles

# Process files in the specified directory
Get-ChildItem -Path $projectFolderPath -Recurse -Include *.java, *.php, *.cs, *.html, *.js, *.py, *.go, *.cpp, *.c, *.h, *.hpp | ForEach-Object {
    $filePath = $_.FullName
    $scanStats.ScannedFiles++
    
    # Update progress bar
    $progressParams.Status = "Scanning $($_.Name)"
    $progressParams.PercentComplete = ($scanStats.ScannedFiles / $totalFiles * 100)
    Write-Progress @progressParams
    
    try {
        if ($filePath -match "(?i)(composer|vendor|autoload|cache|generated|test|mock)") {
            return
        }
        
        $fileContent = Get-Content -Path $filePath -Raw -ErrorAction Stop
        $metadata = Get-FileMetadata -filePath $filePath
        
        foreach ($patternGroup in $patterns) {
            $vulnerabilityType = $patternGroup.Type
            
            foreach ($pattern in $patternGroup.Patterns) {
                $matches = Select-String -InputObject $fileContent -Pattern $pattern -AllMatches
                
                foreach ($match in $matches) {
                    if (Test-ValidContext -content $fileContent -match $match.Matches[0].Value -whitelistPatterns $patternGroup.Whitelist) {
                        $contextStart = [Math]::Max(0, $match.Matches[0].Index - 100)
                        $contextLength = [Math]::Min(200, $fileContent.Length - $contextStart)
                        $context = $fileContent.Substring($contextStart, $contextLength)
                        
                        if (-not ($context -match "(?i)(composer|autoload|vendor|cache|generated|test|mock)")) {
                            $matchObject = [PSCustomObject]@{
                                FilePath = $filePath
                                FileName = Split-Path $filePath -Leaf
                                VulnerabilityType = $vulnerabilityType
                                Pattern = $pattern
                                LineNumber = $match.LineNumber
                                LineText = $match.Line.Trim()
                                Context = $context
                                Metadata = $metadata
                                MatchValue = $match.Matches[0].Value
                                Severity = switch ($vulnerabilityType) {
                                    "Shellcode Patterns" { "High" }
                                    "Injection Functions" { "High" }
                                    "Webshell Functions" { "Critical" }
                                    "Math Pattern" { "Medium" }
                                    default { "Low" }
                                }
                                RiskScore = switch ($vulnerabilityType) {
                                    "Shellcode Patterns" { 8 }
                                    "Injection Functions" { 9 }
                                    "Webshell Functions" { 10 }
                                    "Math Pattern" { 6 }
                                    default { 4 }
                                }
                            }
                            
                            $allMatches += $matchObject
                            $scanStats.MatchesFound++
                        }
                    }
                }
            }
        }
    }
    catch {
        $scanStats.ErrorCount++
        $scanStats.Errors += [PSCustomObject]@{
            FilePath = $filePath
            Error = $_.Exception.Message
        }
        Write-Warning "Error processing file $filePath : $($_.Exception.Message)"
    }
}

# Complete the progress bar
Write-Progress @progressParams -Completed

# Calculate scan statistics
$scanStats.EndTime = Get-Date
$scanStats.Duration = $scanStats.EndTime - $scanStats.StartTime
$scanStats.MatchesByType = $allMatches | Group-Object -Property VulnerabilityType | 
    Select-Object @{N='Type';E={$_.Name}}, @{N='Count';E={$_.Count}}

# Create summary report
$summary = @"
Scan Summary Report
==================
Scan Start Time: $($scanStats.StartTime)
Scan End Time: $($scanStats.EndTime)
Duration: $($scanStats.Duration.ToString())
Total Files: $($scanStats.TotalFiles)
Files Scanned: $($scanStats.ScannedFiles)
Matches Found: $($scanStats.MatchesFound)
Errors Encountered: $($scanStats.ErrorCount)

Matches by Vulnerability Type:
$($scanStats.MatchesByType | ForEach-Object { "$($_.Type): $($_.Count)" })

High Risk Findings (Score >= 8):
$($allMatches | Where-Object { $_.RiskScore -ge 8 } | 
    Select-Object -First 10 | 
    ForEach-Object { "- [$($_.Severity)] $($_.FilePath): $($_.VulnerabilityType)" })
"@

# Generate detailed HTML report
$htmlReport = @"
<!DOCTYPE html>
<html>
<head>
    <title>Security Scan Report - $folderName</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f5f5f5; padding: 20px; border-radius: 5px; }
        .summary { margin: 20px 0; }
        .findings { margin: 20px 0; }
        .finding { border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px; }
        .high { border-left: 5px solid #ff4444; }
        .medium { border-left: 5px solid #ffbb33; }
        .low { border-left: 5px solid #00C851; }
        .critical { border-left: 5px solid #CC0000; }
        pre { background-color: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
        .stats { display: flex; justify-content: space-between; flex-wrap: wrap; }
        .stat-box { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 5px; min-width: 200px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Security Scan Report</h1>
        <p>Project: $folderName</p>
        <p>Scan Date: $($scanStats.StartTime)</p>
    </div>

    <div class="summary">
        <h2>Scan Statistics</h2>
        <div class="stats">
            <div class="stat-box">
                <h3>Total Files</h3>
                <p>$($scanStats.TotalFiles)</p>
            </div>
            <div class="stat-box">
                <h3>Files Scanned</h3>
                <p>$($scanStats.ScannedFiles)</p>
            </div>
            <div class="stat-box">
                <h3>Matches Found</h3>
                <p>$($scanStats.MatchesFound)</p>
            </div>
            <div class="stat-box">
                <h3>Errors</h3>
                <p>$($scanStats.ErrorCount)</p>
            </div>
        </div>
    </div>

    <div class="findings">
        <h2>Findings</h2>
        $(
            $allMatches | Sort-Object -Property RiskScore -Descending | ForEach-Object {
                @"
                <div class="finding $($_.Severity.ToLower())">
                    <h3>[$($_.Severity)] $($_.VulnerabilityType)</h3>
                    <p><strong>File:</strong> $($_.FilePath)</p>
                    <p><strong>Risk Score:</strong> $($_.RiskScore)/10</p>
                    <p><strong>Pattern:</strong> $($_.Pattern)</p>
                    <p><strong>Line Number:</strong> $($_.LineNumber)</p>
                    <p><strong>Context:</strong></p>
                    <pre>$($_.Context)</pre>
                </div>
"@
            }
        )
    </div>

    <div class="errors" style="margin-top: 20px;">
        <h2>Errors</h2>
        $(
            if ($scanStats.Errors.Count -gt 0) {
                $scanStats.Errors | ForEach-Object {
                    "<div class='finding low'><p><strong>File:</strong> $($_.FilePath)</p><p><strong>Error:</strong> $($_.Error)</p></div>"
                }
            } else {
                "<p>No errors encountered during scan.</p>"
            }
        )
    </div>
</body>
</html>
"@

# Save results
$summary | Out-File -FilePath $outputFilePath
$htmlReport | Out-File -FilePath "$folderName-report.html"
$allMatches | ConvertTo-Json -Depth 10 | Out-File -FilePath $jsonOutputPath
$allMatches | Export-Csv -Path $csvOutputPath -NoTypeInformation

# Display completion message with color coding
Write-Host "`nScan completed!" -ForegroundColor Green
Write-Host "Summary saved to: $outputFilePath" -ForegroundColor Yellow
Write-Host "HTML report saved to: $folderName-report.html" -ForegroundColor Yellow
Write-Host "JSON results saved to: $jsonOutputPath" -ForegroundColor Yellow
Write-Host "CSV results saved to: $csvOutputPath" -ForegroundColor Yellow

# Display quick summary
Write-Host "`nQuick Summary:" -ForegroundColor Cyan
Write-Host "=============" -ForegroundColor Cyan
Write-Host "Total files scanned: $($scanStats.ScannedFiles)" -ForegroundColor White
Write-Host "Total matches found: $($scanStats.MatchesFound)" -ForegroundColor White
Write-Host "Errors encountered: $($scanStats.ErrorCount)" -ForegroundColor White
Write-Host "`nHigh Risk Findings:" -ForegroundColor Red
$allMatches | Where-Object { $_.RiskScore -ge 8 } | 
    Select-Object -First 5 | 
    ForEach-Object { 
        Write-Host "- [$($_.Severity)] $($_.FilePath): $($_.VulnerabilityType)" -ForegroundColor Red
    }

# Create email report if findings exceed threshold
if ($scanStats.MatchesFound -gt 0) {
    $emailBody = @"
Security Scan Alert - High Risk Findings Detected

Project: $folderName
Scan Date: $($scanStats.StartTime)
Total Findings: $($scanStats.MatchesFound)

High Risk Findings:
$($allMatches | Where-Object { $_.RiskScore -ge 8 } | 
    Select-Object -First 10 | 
    ForEach-Object { "- [$($_.Severity)] $($_.FilePath): $($_.VulnerabilityType)" })

Please review the attached HTML report for complete details.
"@

    # Save email content for later use
    $emailBody | Out-File -FilePath "$folderName-email-alert.txt"
}

# Return scan results object
return @{
    Stats = $scanStats
    Matches = $allMatches 
    Summary = $summary
    ReportPath = "$folderName-report.html"
}
